{
  "stats": {
    "suites": 1,
    "tests": 6,
    "passes": 6,
    "pending": 0,
    "failures": 0,
    "start": "2022-09-09T03:17:00.620Z",
    "end": "2022-09-09T03:17:11.170Z",
    "duration": 10550,
    "testsRegistered": 6,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "1a92aad4-f422-47d9-a9d9-20aebde5492e",
      "title": "",
      "fullFile": "cypress/e2e/2-advanced-examples/network_requests.cy.js",
      "file": "cypress/e2e/2-advanced-examples/network_requests.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "12144c20-e898-44db-bf3c-a44c13824aed",
          "title": "Network Requests",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "cy.request() - make an XHR request",
              "fullTitle": "Network Requests cy.request() - make an XHR request",
              "timedOut": null,
              "duration": 1728,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/request\ncy.request(\"https://jsonplaceholder.cypress.io/comments\").should(response => {\n  expect(response.status).to.eq(200); // the server sometimes gets an extra comment posted from another machine\n  // which gets returned as 1 extra object\n  expect(response.body).to.have.property(\"length\").and.be.oneOf([500, 501]);\n  expect(response).to.have.property(\"headers\");\n  expect(response).to.have.property(\"duration\");\n});",
              "err": {},
              "uuid": "6db0c1bc-cb7b-442a-ad42-6b83a08ee345",
              "parentUUID": "12144c20-e898-44db-bf3c-a44c13824aed",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.request() - verify response using BDD syntax",
              "fullTitle": "Network Requests cy.request() - verify response using BDD syntax",
              "timedOut": null,
              "duration": 1224,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request(\"https://jsonplaceholder.cypress.io/comments\").then(response => {\n  // https://on.cypress.io/assertions\n  expect(response).property(\"status\").to.equal(200);\n  expect(response).property(\"body\").to.have.property(\"length\").and.be.oneOf([500, 501]);\n  expect(response).to.include.keys(\"headers\", \"duration\");\n});",
              "err": {},
              "uuid": "e5e22c89-0d71-4582-aca5-2fb341f56c64",
              "parentUUID": "12144c20-e898-44db-bf3c-a44c13824aed",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.request() with query parameters",
              "fullTitle": "Network Requests cy.request() with query parameters",
              "timedOut": null,
              "duration": 921,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// will execute request\n// https://jsonplaceholder.cypress.io/comments?postId=1&id=3\ncy.request({\n  url: \"https://jsonplaceholder.cypress.io/comments\",\n  qs: {\n    postId: 1,\n    id: 3\n  }\n}).its(\"body\").should(\"be.an\", \"array\").and(\"have.length\", 1).its(\"0\") // yields first element of the array\n.should(\"contain\", {\n  postId: 1,\n  id: 3\n});",
              "err": {},
              "uuid": "6c1bd407-7a74-4dd7-a33b-b72b698c5b2f",
              "parentUUID": "12144c20-e898-44db-bf3c-a44c13824aed",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.request() - pass result to the second request",
              "fullTitle": "Network Requests cy.request() - pass result to the second request",
              "timedOut": null,
              "duration": 1559,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// first, let's find out the userId of the first user we have\ncy.request(\"https://jsonplaceholder.cypress.io/users?_limit=1\").its(\"body\") // yields the response object\n.its(\"0\") // yields the first element of the returned list\n// the above two commands its('body').its('0')\n// can be written as its('body.0')\n// if you do not care about TypeScript checks\n.then(user => {\n  expect(user).property(\"id\").to.be.a(\"number\"); // make a new post on behalf of the user\n  cy.request(\"POST\", \"https://jsonplaceholder.cypress.io/posts\", {\n    userId: user.id,\n    title: \"Cypress Test Runner\",\n    body: \"Fast, easy and reliable testing for anything that runs in a browser.\"\n  });\n}) // note that the value here is the returned value of the 2nd request\n// which is the new post object\n.then(response => {\n  expect(response).property(\"status\").to.equal(201); // new entity created\n  expect(response).property(\"body\").to.contain({\n    title: \"Cypress Test Runner\"\n  }); // we don't know the exact post id - only that it will be > 100\n  // since JSONPlaceholder has built-in 100 posts\n  expect(response.body).property(\"id\").to.be.a(\"number\").and.to.be.gt(100); // we don't know the user id here - since it was in above closure\n  // so in this test just confirm that the property is there\n  expect(response.body).property(\"userId\").to.be.a(\"number\");\n});",
              "err": {},
              "uuid": "0287cffc-9854-4b74-bf52-0b223eeee4e7",
              "parentUUID": "12144c20-e898-44db-bf3c-a44c13824aed",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.request() - save response in the shared test context",
              "fullTitle": "Network Requests cy.request() - save response in the shared test context",
              "timedOut": null,
              "duration": 1493,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/variables-and-aliases\ncy.request(\"https://jsonplaceholder.cypress.io/users?_limit=1\").its(\"body\").its(\"0\") // yields the first element of the returned list\n.as(\"user\") // saves the object in the test context\n.then(function () {\n  // NOTE ðŸ‘€\n  //  By the time this callback runs the \"as('user')\" command\n  //  has saved the user object in the test context.\n  //  To access the test context we need to use\n  //  the \"function () { ... }\" callback form,\n  //  otherwise \"this\" points at a wrong or undefined object!\n  cy.request(\"POST\", \"https://jsonplaceholder.cypress.io/posts\", {\n    userId: this.user.id,\n    title: \"Cypress Test Runner\",\n    body: \"Fast, easy and reliable testing for anything that runs in a browser.\"\n  }).its(\"body\").as(\"post\"); // save the new post from the response\n}).then(function () {\n  // When this callback runs, both \"cy.request\" API commands have finished\n  // and the test context has \"user\" and \"post\" objects set.\n  // Let's verify them.\n  expect(this.post, \"post has the right user id\").property(\"userId\").to.equal(this.user.id);\n});",
              "err": {},
              "uuid": "8fd93910-aa70-4445-9f32-acbede683534",
              "parentUUID": "12144c20-e898-44db-bf3c-a44c13824aed",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.intercept() - route responses to matching requests",
              "fullTitle": "Network Requests cy.intercept() - route responses to matching requests",
              "timedOut": null,
              "duration": 2276,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/intercept\nlet message = \"whoa, this comment does not exist\"; // Listen to GET to comments/1\ncy.intercept(\"GET\", \"**/comments/*\").as(\"getComment\"); // we have code that gets a comment when\n// the button is clicked in scripts.js\ncy.get(\".network-btn\").click(); // https://on.cypress.io/wait\ncy.wait(\"@getComment\").its(\"response.statusCode\").should(\"be.oneOf\", [200, 304]); // Listen to POST to comments\ncy.intercept(\"POST\", \"**/comments\").as(\"postComment\"); // we have code that posts a comment when\n// the button is clicked in scripts.js\ncy.get(\".network-post\").click();\ncy.wait(\"@postComment\").should(({\n  request,\n  response\n}) => {\n  expect(request.body).to.include(\"email\");\n  expect(request.headers).to.have.property(\"content-type\");\n  expect(response && response.body).to.have.property(\"name\", \"Using POST in cy.intercept()\");\n}); // Stub a response to PUT comments/ ****\ncy.intercept({\n  method: \"PUT\",\n  url: \"**/comments/*\"\n}, {\n  statusCode: 404,\n  body: {\n    error: message\n  },\n  headers: {\n    \"access-control-allow-origin\": \"*\"\n  },\n  delayMs: 500\n}).as(\"putComment\"); // we have code that puts a comment when\n// the button is clicked in scripts.js\ncy.get(\".network-put\").click();\ncy.wait(\"@putComment\"); // our 404 statusCode logic in scripts.js executed\ncy.get(\".network-put-comment\").should(\"contain\", message);",
              "err": {},
              "uuid": "c6a8ae90-85bb-499b-96f1-2f595cacb1c5",
              "parentUUID": "12144c20-e898-44db-bf3c-a44c13824aed",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "6db0c1bc-cb7b-442a-ad42-6b83a08ee345",
            "e5e22c89-0d71-4582-aca5-2fb341f56c64",
            "6c1bd407-7a74-4dd7-a33b-b72b698c5b2f",
            "0287cffc-9854-4b74-bf52-0b223eeee4e7",
            "8fd93910-aa70-4445-9f32-acbede683534",
            "c6a8ae90-85bb-499b-96f1-2f595cacb1c5"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 9201,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "id": "default",
        "reportDir": "cypress/reports/mocha",
        "quite": true,
        "overwrite": false,
        "html": true,
        "json": true
      },
      "version": "6.2.0"
    }
  }
}